# Test file to figure out how to use subroutines/return addresses
# First phase: only implement 1-level returns (can't call from within a subroutine)
# Second phase: do a full return stack (TODO)
#
# GADGET: jsr  (1-level)
#   R  R  ?
# ?+6  R  ?            # copy constant retaddr to R(-)
#   Z  Z  sub_routine  # jump subroutine
#   ?                  # constant ret_addr
#   _  _  _            # returns to here
#
#
# GADGET: retsub  (1-level)
#  Q Q ?
#  R Q ?    #set Q = -R
#  Z Z Q:_  #jmp -R
#
#
# ===== ALTERNATIVE GADGETS:
#
# GADGET: jsr_fast   (NOTE: only works if return is >0 (<7FFF)
#   R  R  ?
# ?+3  R  sub_routine  #copy constant retaddr to R(-)
#   ?                  #constant return_addr
#   _  _  _            #returns to here
#
# GADGET: jsr_2  (works for all addresses, fast for <7FFF
#   R  R  ?
# ?+6  R  sub_routine  # copy constant retaddr to R(-) (and jump if able)
#   Z  Z  sub_routine  # jump subroutine  (backup, in case R(-) >= 0  (ret_addr >8000)
#   ?                  # constant ret_add_r
#   _  _  _            # returns to here
#
# GADGET: retsub_fast (NOTE: only works if return is <0 (>8000)
#   Q  Q  ? 
#   R  Q  Q:_   #set Q=-R, jmp Q





# =========  HEADER

@0 # Z T entry       P1  M1  0 0
     0 0 100   0      1 FFFF 0 0
@8 # I O A B     _ 0xD:halt0
     0 0 0 0     0 0 0 D
@10 #ALU
# & | ^ _   << >> _ _
  0 0 0 0   0  0  0 0

# ========  REGISTERS AND CO.

@20 # X Y Z W           R  (REGS)
      0 0 0 0     0 0 0 0

# leave rooms for vars at 28-2F

# ======== CONSTANTS
# Mnemonics: 
#    +/- single digits: 4 is +1, 5 is -1, lets make 4X be +X, 5X be -X
#    +/- nibs place: like 4 but shifted up to 8

@40 #4_: 0-F
0 1 2 3 4 5 6 7 8 9 A B C D E F

@50 #5_: negative 0-F
0000 FFFF FFFE FFFD FFFC FFFB FFFA FFF9 
FFF8 FFF7 FFF6 FFF5 FFF4 FFF3 FFF2 FFF1

@80 #8_: 0-F
0 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0

@90 #9_: (-00) - (-F0)
0000 FFF0 FFE0 FFD0 FFC0 FFB0 FFA0 FF90
FF80 FF70 FF60 FF50 FF40 FF30 FF20 FF10

@D0 #error_page
   0  0 D0    #D0:   halt0 #success
   1  1 D3    #D3:   halt1 
   2  2 D6    #D6:   halt2 
   3  3 D9    #D9:   halt3 
   4  4 DC    #DC:   halt4
   5  5 DC    #DF:   halt5

# ======== CODE

@100 #main:
   0   0 200  #   : main_proc


# Subroutine and return code

@140 #subroutine: print_hi
#output 'h', 'i', return to R
   3   3   ?  #   : T T
  86   3   ?  #   : $60 T
  48   3   ?  #   : $8  T   #T = -'h'
   3   9   ?  #   : T O    
   4   3   ?  #   : $1  T   #T = -'i'
   3   9   ?  #   : T O

   0   0 180  #   : Z Z retsub

#now: need to return
#R holds negative return addr
#We should be able to shorten it to just 2 instructions
#if our return address is <0 (>8000) (by jumping from (R Q jump_loc))

@180 #retsub
 188 188   ?  #   : Q Q
  27 188   ?  #183: R Q 
   0   0   0  #186: Z Z Q:0 #return to -R
   0   0  D9  #   : halt3 (err)

#first test: make some subroutine, then jump to it several times, returning to different places





# =================
# Main code: 
#  Prints "hi hihi\n"
#  call print_hi, return, print ' ', call print_hi twice, end bit

@200  #main_proc
  27  27   ?  #   : R R
 21F  27 140  #   : retaddr R print_hi  
              #   : (puts retaddrconst1 in R, jumps print_hi)

@21F ?  #retaddrconst1
@220 #return_1: output space, call print_hi again
   3   3   ?  #   : T T
  82   3   ?  #   : $20 T
   3   9   ?  #   : T O  #putchar(' ')
  27  27   ?  #   : R R
 23F  27 140  #   : retaddr2 R print_hi

@23F ? #ret2
@240 #return_2: #call print_hi again with no space
  27  27   ?  #   : R R
 25F  27 140  #   : ret3 R print_hi
  

@25F ? #ret3
@260 # return_3 : print newline, halt4
   3   3   ?  #   : T T
  4a   3   ?  #   : $a T    
   3   9   ?  #   : T O     #putchar('\n')
   0   0  DC  #   : halt4
# ========= NOTES

#Snippets:
#
# JLEZ(X,LOC): Z X LOC 
# JGEZ(X,LOC): T T; X T LOC
# JGTZ(X,LOC): T T; $-1 T; X T LOC;
# JLTZ(X,LOC): T T; X T ?+3; Z Z LOC;
#
# SUBJGE(X,Y,LOC): X Y LOC;            #Y -= X
# SUBJLE(X,Y,LOC): T T; X Y; Y T LOC;  #Y -= X
#
#
# JGE(X,Y,LOC): T T; Y Z; Z T; Z Z; X T LOC;
# JLE: mirror
