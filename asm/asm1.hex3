# Upgrading hex3 to asm 1
# Will have label support
#
# Asm1 Spec:
# Like hex1, handles hex numbers and '#' comments
# Like hex2, handles '?' and '@'
# Like hex3, handle '?+XX'
#
# Also does:
#  label:    #create label here
#  label     #insert value of label
#  # labels must start with [g-zG-Z_], continue with [a-zA-Z_0-9]


## TODO Checklist
# - Rethink register conventions?
# - Add parser for labels, simple echo type thing
# - Port in code from table.hex3
# - Hook everything together


#niceties for later
#add initializer to reset entry to halt (catch runaway nops)


# ===== NOTES ON MEMORY LAYOUT, CALLING CONVENTIONS, ETC
# = Notes on signedness:
# In memory strings are (+)
# In vars, chars are usually (-) 
# In memory values are usually (-) (so + when read)
# Pointers in vars are usually (-) (so + when peeked/poked)
#
# = Notes on register conventions:
# ??
#
# = Notes on call/return conventions:
# ??


# =========  HEADER

@0 # Z T entry       P1  M1  0 0
     0 0 2100  0      1 FFFF 0 0
@8 # I O A B     _ 0xD:halt0
     0 0 0 0     0 0 0 D
@10 #ALU
# & | ^ _   << >> _ _
  0 0 0 0   0  0  0 0

@18 #           _ 0x1D: halt1
      0 0 0 0   0 1 1 1D

# ========  REGISTERS AND CO.

#Unsaved registers
@20 # X Y Z W               (REGS)
      0 0 0 0     0 0 0 0

#Saved registers (only modify these if you're top-level, or save them first)
@28 #
      0  0  0  0     0  0  0  0

@30 #Global vars
#C(-) N Off _
 0    0  0  0

#R R2  _  _
 0  0  0  0

@38 #More vars
#strtab_base strtab_end   (next new string in strtab goes at strtab_end)
 E00      E00
#buffer_b _
 0        0
#Table_b table_size 
#_  _



#C is last char read (-)   (treated as first char of input)
#N is where read_num puts its result (+)
#R is retval: address to return to
#Off is current offset in the binary (-)





# ======== Small integer constants:

@40
#4_: 0-F
0 1 2 3 4 5 6 7 8 9 A B C D E F

@50
#5_: -0 - -F
0000 FFFF FFFE FFFD FFFC FFFB FFFA FFF9
FFF8 FFF7 FFF6 FFF5 FFF4 FFF3 FFF2 FFF1

@80
#8_: 00-F0 (tens)
0 10 20 30 40 50 60 70 80 90 A0 B0 C0 D0 E0 F0

@90
#9_: (-00) - (-F0)
0000 FFF0 FFE0 FFD0 FFC0 FFB0 FFA0 FF90
FF80 FF70 FF60 FF50 FF40 FF30 FF20 FF10



# ======== Misc jump spots

@D0 #error_page
   0  0 D0    #D0:   halt0 #success
   1  1 D3    #D3:   err: halt1 #unrecognized char
   2  2 D6    #D6:   err: halt2 # @LOC goes backwards
   3  3 D9    #D9:   err: halt3 #seek assert err


@F0 #retsub
 ?+7 ?+6    ?    #
  38 ?+3    ?    #set Q = -R
   0   0   FF    #jmp -R  (FF temp, gets Q)





# ======================= Primitives


# Parses a number from stdin, (first char in C)
# Result stored in N
# Returns to R at first non-digit char, leaves that char in C
#TODO: generate err on overflow
@800 #read_num:             #doesnt set R, will return through output_num
  31 31   ?    #   : N N (clear N)
@803 #read_num_continue
  20 20   ?    #   : X X
  30 20   ?    #   : C X  #X has +char
  82 20   ?    #   : $20 X
  4F 20  F0    #   :  $F X return     #<=2F
  4A 20 833    #   :  $A X num_dig    #<=39, '0'-'9'
  47 20  F0    #   :  $7 X return     #<=40
  46 20 830    #   :  $6 X num_alpha  #<=46  'A'-'F'
  81 20   ?    #   : $10 X
  4A 20  F0    #   :  $A X return     #<=60
  46 20 830    #   :  $6 X num_alpha  #<=66  'a'-'f'
   0  0  F0    #   :   Z Z return     #>66

@830 #num_alpha
  56 20   ?    #   : $-6 X   #if alpha, value is X + F
@833 #num_dig
  59 20   ?    #   : $-9 X   #if digit, value is X + 9

# now X is value(+) of this digit
# Shift N<<=4
   A  A   ?    #   : A A
  31  A   ?    #   : N A
   B  B   ?    #   : B B
  54  B   ?    #   : $-4 B
  31 31   ?    #   : N N
  14 31   ?    #   : LS N  #N << 4 (negativeness wouldn't matter if it wasn't overflowing anyway)

# Add X
  20  0   ?    #   : X Z
   0 31   ?    #   : Z N  #N += X
  30 30   ?    #   : C C

# loop
   8 30   ?    #   : I C  #getChar()
   0  0 803    #   : Z Z read_num_continue  (loop)



@900 #=== put_num
#   print out contents of N, little-endian,
#   return to R
   A  A   ?     #   : A   A
  31  0   ?     #   : N   Z
   0  A   ?     #   : Z   A
   0  0   ?     #   : Z   Z  #A=+N
   B  B   ?     #   : B   B
  9F  B   ?     #   : $-F0 B
  5F  B   ?     #   : $-F B #B=FF
  10  0   ?     #   : AND Z
   0  9   ?     #   : Z   O   #putchar(N & FF)
   0  0   ?     #   : Z   Z
   B  B   ?     #   : B   B
  58  B   ?     #   : $-8 B #B=8
  15  0   ?     #   : RS  Z
   0  9   ?     #   : Z   O   #putchar(N >> 8)
   4 32   ?     #   : $1 Off   #inc offset
   0  0  F0     #   : retsub


@A00 #== read_label
#  reads a label: [0-9a-zA-Z_]*
#  writes string to memory at strtab_end
#  as usual: str[0] is len, chars from str[1]..str[len]

# Y is len so far
# Z(-) is ptr for next char
#
  21  21   ?  #   : Y Y       # Y = 0
  22  22   ?  #   : Z Z
  39  22   ?  #   : strtab_end Z
   4  22   ?  #   : $1 Z      # Z(-) = strtab_end+1
   0   0   ?  #   :           # 
   0   0 A40  #   : to loop   # 

@A40 #read_label_loop:   (Tests if C is a valid label char)
                              
  20 20   ?   #   : X X
  30 20   ?   #   : C X              #X has +char
  82 20   ?   #   : $20 X
  4C 20 B00   #   :  $C X end        #<=2C  
  43 20 B00   #   :  $3 X end        #<=2F
  4A 20 A80   #   :  $A X continue   #<=39, '0'-'9'
  47 20 B00   #   :  $7 X end        #<=40
#@A52
  81 20   ?   #   : $10 X
  4A 20 A80   #   :  $A X continue   #<=5A  'A'-'Z'
  44 20 B00   #   :  $4 X end        #<=5E
  41 20 A80   #   :  $1 X continue   #<=5F  '_'
  41 20 B00   #   :  $1 X end        #<=60
  81 20   ?   #   : $10 X
  4A 20 A80   #   :  $A X continue   #<=7A  'a'-'z'
   0  0 B00   #   :   Z Z end        #>7A

@A80 #read_label_continue
                              # C(-) is the right char, we want to write it to Z
                              # Poke inverts: Poke C, so that in-mem is (+)
# GADGET: POKE: *(Z-) = -C
 ?+11 ?+10 ? # J J            #  *(Z-) = -C
   22 ?+D  ? # Z J            #  . 
  ?+C ?+B  ? # K K            #  . 
   22 ?+8  ? # Z K            #  . 
  ?+9 ?+8  ? # L L            #  . 
   22 ?+5  ? # P L            #  . 
    0   0  ? # J:_ K:_        #  . 
   30   0  ? #  X  L:_        #  . 

   4  22   ?  #   : $1 Z      # Advance ptr(-) Z (actually dec)
   5  21   ?  #   : $-1 Y     # Inc length (in Y)

  30  30   ?  #   : C C       # fetch next char
   8  30   ?  #   : I C       # 

   0   0 A40  #   : Z Z loop  # loop
   0   0   ?  #   :           # 


@B00 #read_label_end
                              # We've read all the characters we need
                              # Now write in length
  22  22   ?  #   : Z Z          #
  39  22   ?  #   : strtab_end Z #  Z = (-) strtab_end

# GADGET: POKE: *(Z-) = -Y
 ?+11 ?+10 ? # J J            #  *(Z-) = -Y
   22 ?+D  ? # Z J            #  . 
  ?+C ?+B  ? # K K            #  . 
   22 ?+8  ? # Z K            #  . 
  ?+9 ?+8  ? # L L            #  . 
   22 ?+5  ? # P L            #  . 
    0   0  ? # J:_ K:_        #  . 
   21   0  ? #  Y  L:_        #  . 


# We're done? return
   0   0  F0  #   : retsub    # 



   0   0   ?  #   :           # 
   0   0   ?  #   :           # 
   0   0   ?  #   :           # 

# ======================= Parser Functions
# Handle input, return to main loop

@1800 #=== comment:
# keep looping until \n, then go to handle_char
# Now optimized for common case, if char>'a', runs in 3 steps
  30   30    ?  #   C   C
  5B   30    ?  #   $-B C
   8   30  1800 #   I   C comment2   #C = $B - getChar(); if C<=0, then char >$a
  4B   30    ?  #   $B  C
  20   20    ?  #   X   X
  30   20    ?  #   C   X  #X gets +char
   5   20   D0  #  $-1  X halt0  #if X+1 LEQZ, X<0, EOF so halt
  4A   20  1800 #  $A   X comment2  #subtract 1 + 9.   If LEQ, X < '\n', loop
   0    0  2000 #   Z   Z handle_char    #X is definitely \n, end comment



@1880 #=== handle_lit_num
# (encountered hex num in src, parse it to end)
   38 38 ?  ?+5 38 ?  0 0 800  ?  #JSR read_num  (parse num into N)
   38 38 ?  ?+5 38 ?  0 0 900  ?  #JSR put_num   (outputs it)
   0   0  2000  #   : jmp back to handle_char




@1900 #=== seek_ahead:
# Encountered '@' in source
# Next must be number, parse it
# Skip ahead to that offset in the file, outputting '000D'
# If seeking backwards, error out
#
  30 30   ?    #   : C C
   8 30   ?    #   : I C            #getchar(), to drop C(-) = '@'
  38 38   ?    #   : R   R

   38 38 ?  ?+5 38 ?  0 0 800  ?  #JSR read_num  (parse num into N)

#target addr in N (+)
#If (target < offset), halt2  (seeking backwards is a bug)
  20 20   ?    #   : X X
  32 20   ?    #   : Off X      # Off is (-)
  31 20 ?+3    #   : N   X ?+3  # X = Off - N
   0  0  D6    #   : Z Z halt2       #if Off > N, halt2    (seeking backwards is an err)

# Loop X times, outputing 000D. (If X==0, jumps to end and breaks)
   0  0 1949   #   : Z Z seek_while  (jump into loop)
         @1940 #seek_loop: (output a halt 000D) Runs as long as X<0
  5D  9   ?    #   : $-D O
   0  9   ?    #   : $0  O             #putword(000D)
   4 32   ?    #   : $1 Off            #inc offset, (not strictly necessary here)
         @1949 #seek_while:
   5 20 1940   #   : $-1 X seek_loop   #loop while ++X LEQZ, or while X++ LTZ

# Assert Off == N
   3  3   ?    #   : T T
  32  3   ?    #   : Off T
  31  3 ?+3    #   : N T ?+3    # T must be <=0
   0  0  D9    #   : Z Z halt3  # else
   3  0 ?+3    #   : T Z ?+3    # T must be >=0
   0  0  D9    #   : Z Z halt3

# Clear N, jump to main loop
  31 31 2000   #   : N N handle_char




@1A00 #=== put_offset:
# handles '?'
# ? on its own puts address of next byte
# '?+NUM' puts next byte + NUM
  31  31   ?   #   : N N # clear N, will set to nonzero if +offset
  30  30   ?   #   : C C
   8  30   ?   #   : I C # getchar (after ?)

#test if next char == "+"
  20  20   ?   #   : X X
  30  20   ?   #   : C X  #X = +char (-C)
  82  20   ?   #   : $20 X
  4A  20 1A60  #   : $A X put_offset_finish   #X <=2A
   4  20 1A40  #   : $1 X put_offset_plus     #X <=2B  '+'
   0   0 1A60  #   : Z Z  put_offset_finish   #X  >2B

@1A40 #put_offset_plus:
# we got a plus sign,
  30  30   ?   #330: C C
   8  30   ?   # 33: I C #getchar (drop the plus sign)
   38 38 ?  ?+5 38 ?  0 0 800  ?  #JSR read_num  (parse num into N)

   0   0 1A60  # (link here)
#Now N is the offset, C is next char to be read
#Ouput offset+1 (next loc), +N if N is nonzero
@1A60 #put_offset_finish:
  32  31   ?   #   : Off N  #N += +offset (-O)
   5  31   ?   #   : $-1 N  # Will output curr offset + 1 + N

   38 38 ?  ?+5 38 ?  0 0 900  ?  #JSR put_num  (outputs N)
   0   0 2000  #   : jmp handle_char




# =============================== MAIN LOOP

#Note: expects first char of input in C (-)
# clobbers X, jumps to one of the parser funcs
# parser funcs jump back here (directly, not using return mechanism)

@2000 #handle_char:
#Needs to test what char C(-) is
#First copy it into X(+)
  20 20  ?    #  :  X  X
  30 20  ?    #  :  C  X

# Test value by repeatedly subtracting and testing <= 0
   5 20 D0    #  : $-1 X halt0               # char <= -1, == EOF
   4 20  ?    #  : $1  X                     #
  82 20 2100  #  : $20 X skip_char           # <=20, ' ' or \n     #TODO: make 0x21 constant
  42 20 D3    #  : $2  X halt1               # <=22       invalid char
  41 20 1800  #  : $1  X comment             # <=23   #
  4C 20 D3    #  : $C  X halt1               # <=2F
  4A 20 1880  #  : $A  X read_lit_num        # <=3A   0-9
  45 20 D3    #  : $5  X halt1               # <=3F
   4 20 1A00  #  : $1  X put_offset (?)      # <=40   ?
   4 20 1900  #  : $1  X seek_ahead (@)      # <=41   @
  46 20 1880  #  : $6  X read_lit_num        # <=47   A-F
  81 20  ?    #  : $10 X                     #
  4A 20 D3    #  : $A  X err                 # <=61
  46 20 1880  #  : $6  X read_lit_num        # <=67   a-f
   0  0 D3    #  : Z   Z err                 #  >67

@2100 # skip_char:
# Fetches the next char into C(-), dropping what had been there
# Jumps to handle_char. Also works as entrypoint
  30 30  ?    #  : C C
   8 30  ?    #  : I C     #C(-) := getChar()
   0  0 2000  #  : jmp handle_char


@2200 # custom_test:
# test read_label

  30  30   ?  #   : C C       # 
   8  30   ?  #   : I C       # fetch char

   38 38 ?  ?+5 38 ?  0 0 A00  ?  #JSR read_label

   0   0  D0  #   : halt0     # exit
   0   0   ?  #   :           # 







   0   0   ?  #   :           # 
   0   0   ?  #   :           # 
   0   0   ?  #   :           # 
   0   0   ?  #   :           # 
   0   0   ?  #   :           # 
   0   0   ?  #   :           # 
   0   0   ?  #   :           # 
   0   0   ?  #   :           # 
   0   0   ?  #   :           # 
   0   0   ?  #   :           # 




# (test invocation:)
# sleqrun hex3.bin <asm/asm1.hex3 >asm1.bin && sleqrun asm1.bin < asm/asm1.hex3 > asm1.bin2 && sleqrun asm1.bin2 < asm/hello.hex3 | sleqrun -

# ========== GADGETS / CODE SNIPPETS


#Snippets:
#
# JLEZ(X,LOC): Z X LOC
# JGEZ(X,LOC): T T; X T LOC
# JGTZ(X,LOC): T T; $-1 T; X T LOC;
# JLTZ(X,LOC): T T; X T ?+3; Z Z LOC;
#
# SUBJGE(X,Y,LOC): X Y LOC;            #Y -= X
# SUBJLE(X,Y,LOC): T T; X Y; Y T LOC;  #Y -= X
#
#
# JGE(X,Y,LOC): T T; Y Z; Z T; Z Z; X T LOC;
# JLE: mirror
#
# GADGET: jsr  (1-level)
#   R  R  ?
# ?+5  R  ?            # copy constant retaddr to R(-)
#   Z  Z  sub_routine  # jump subroutine
#   ?                  # constant ret_addr
#   _  _  _            # returns to here
#
# (JSR oneliner)
#   38 38 ?  ?+5 38 ?  0 0 sub_routine  ?  #JSR
#
# GADGET: retsub  (1-level)
# ?+7 ?+6    ?
#   R ?+3    ?    #set Q = -R
#   Z   Z  Q:0    #jmp -R
#


# GADGET: FETCH_SUBTRACT: *(-P) X
# ?+5 ?+4   ?  #   : Q   Q     #
#   P ?+1   ?  #   : P   Q     #
#   _   X   ?  #   : Q:_ X     # X -= *(-P)
#
#
# GADGET: POKE: *(P-) = -X
# ?+11 ?+10 ? # J J            #  *(P-) = -X
#   22 ?+D  ? # P J            #  . 
#  ?+C ?+B  ? # K K            #  . 
#   22 ?+8  ? # P K            #  . 
#  ?+9 ?+8  ? # L L            #  . 
#   22 ?+5  ? # P L            #  . 
#    0   0  ? # J:_ K:_        #  . 
#   20   0  ? #  X  L:_        #  . 
