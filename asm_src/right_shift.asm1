# Program to extract bytes without using ALU
# first print low byte, then high byte
# currently only works for words <F000 (positive)

# idea: subtract 0x0100 repeatedly until it's <=FF
# in practice, we negate it and add 0x100 repeatedly until >0, then subtract x100 once
# remainder is lowbyte.
# Optimization: first do it with 0x1000, then 0x100

#For highbyte, do (word - lowbyte) to mask away the bottom
#Then repeatedly do W = W - x100 + 1 = W - FF
#Loop until <=FF, then will be >>8
# Optimization: use negative W and repeatedly add
# Optimization, first do W - x1000 + 10, then W - x100 + 1

### NOTE ON CODE STRUCTURE:
# Code is grouped into blocks of 0x20 bytes
# this isn't divisible by 3, so the last instruction is a nop,
# it jumps to the next 0x20 aligned block
# This way code can be shuffled around without renumbering everything,
# especially if leaving some space of NOPS in code blocks

# =========  HEADER

# 0x0
#Z 0 entry Z2    P1  M1  0 0
 0 0  40   0      1 FFFF 0 0

# 0x8
# I O A B     _ 0xD:halt(0)
  0 0 0 0     0 0 0 D

# 0x10: ALU
# & | ^ _   << >> _ _
  0 0 0 0   0  0  0 0
  
# 0x18 
#           _ 0x1D: halt(1)
  0 0 0 0   0 1 1 1D 

# ========  REGISTERS AND CO.

#0x20: Registers
# X Y Z W
  0 0 0 0     0 0 0 0

#0x28: Vars
#    P  PLO  PHI     
  6442    0    0    0      0    0    0    0 


#0x30: Constants
# x100 -x100  FF  -FF   1000 -1000 FF0 -FF0
   100 FF00   FF FF01   1000 F000  FF0 F010 
   0 0 0 0   0 0 0 0
#FF = 100 - 1
#FF0   = 1000 - 10


# ======== CODE

#lowbyte(X) -> P     (for x>0)
#0x40 : code
   0  0 43    #40:
   0  0 46    #43: 
  20 20 49    #46: X X
  28 20 4c    #49: P X          #X= -P
  35 20 4C    #4C: $-1000 X ?-3 #+=1000 until > 0
  34 20 52    #4F: $1000 X      #remove overshoot
  31 20 52    #52: $-100 X ?-3  #+=100 until >0
  30 20 58    #55: $100 X       #remove oversoot
  20 29 5b    #58: X PLO
   0  0 60    #5B: Z Z 60
   0 0 #5E-5F


#X>>8 (given X&FF=0, and X>0)
#take -X, add 0xFF to it repeatedly
#if X is -0500, after 5 runs it will be at -0005
#then will be 0x100-6 = -6
#then negate it again
  20  9 63    #0x60: X O     #putc PLO
   0  0 66    #0x63:         
   0  0 69    #0x66:    
   0  0 6c    #0x69: 
  20 20 6f    #0x6C: X X     #now, we need -(P - PLO)
  28 20 72    #0x6F: P X     #X = -P
  29  0 75    #0x72: PLO Z
   0 20 78    #0x75: Z X     #X += PLO
   0  0 7b    #0x78: Z Z    
   0  0 80    #0x7B: Z Z 80
   0 0 #7E-7F

  37 20 80    #0x80: $-FF0 X ?-3#repeatedly add x1000 - 1
  36 20 86    #0x83: $FF0 X     #fix overshoot
  33 20 86    #0x86: $-FF X ?-3 #repeatedly add x100 - 1
  32 20 8c    #0x89: $FF  X     #cancel out overshoot
   0  0 8f    #0x8C:            #t now holds -hibyte
  20 2A 92    #0x8F:  X PHI
  20  9 95    #0x92:  X O
   0  0  D    #0x95:  HALT
   0  0 9b    #0x98: 
   0  0 A0    #0x9B: Z Z A0
   0 0 #9E-9F



#SPARE CODE BLOCKS
   0  0 43    #40: Z Z ?
   0  0 46    #43: 
   0  0 49    #46: 
   0  0 4c    #49: 
   0  0 4f    #4C: 
   0  0 52    #4F: 
   0  0 55    #52: 
   0  0 58    #55: 
   0  0 5b    #58: 
   0  0 60    #5B: Z Z 60
   0 0 #5E-5F
   0  0 43    #40: Z Z ?
   0  0 46    #43: 
   0  0 49    #46: 
   0  0 4c    #49: 
   0  0 4f    #4C: 
   0  0 52    #4F: 
   0  0 55    #52: 
   0  0 58    #55: 
   0  0 5b    #58: 
   0  0 60    #5B: Z Z 60
   0 0 #5E-5F

